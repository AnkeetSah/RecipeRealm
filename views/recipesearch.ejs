<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recipe App - Food List</title>
    <link rel="icon" type="image/png" href="./images/appLogo/fav.png">
    <link rel="stylesheet" href="/css/header.css">
    <style>
        /* Reset some default browser styles */
        * {
            padding: 0;
            margin: 0;
            box-sizing: border-box;
        }

        body, h1, p, ul, li, a {
            margin: 0;
            padding: 0;
            list-style: none;
            text-decoration: none;
            box-sizing: border-box;
        }

        /* General body styling */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: #ffffff;
            background: linear-gradient(135deg, #0f0f0f 0%, #1a1a1a 100%);
            min-height: 100vh;
        }

       

       

     

       

        /* Main content wrapper */
        .main-content {
            margin-top: 80px;
            min-height: calc(100vh - 80px);
        }

        /* Search section styling - PROFESSIONAL REDESIGN */
        .search-section {
           
            padding: 25px 20px;
            
        }

        .search-container {
            max-width: 800px;
            margin: 0 auto;
            text-align: center;
        }

        .search-title {
            font-size: 24px;
            font-weight: 300;
            color: #ffffff;
            margin-bottom: 5px;
            letter-spacing: 1px;
        }

        .search-subtitle {
            color: #bbb;
            font-size: 14px;
            margin-bottom: 20px;
        }

        .search-form {
            background: black;
            border-radius: 15px;
            padding: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(0, 255, 0, 0.1);
        }

        .search-input-group {
            display: flex;
            justify-content: center;
            margin-bottom: 15px;
            gap: 10px;
            flex-wrap: wrap;
        }

        .search-box {
            flex: 1;
            max-width: 400px;
            padding: 15px 20px;
            border-radius: 50px;
            border: 2px solid rgba(0, 255, 0, 0.3);
            background: rgba(51, 118, 1, 0.1);
            color: #ffffff;
            font-size: 16px;
            transition: all 0.3s ease;
            outline: none;
        }

        .search-box:focus {
            border-color: #00ff00;
            box-shadow: 0 0 20px rgba(0, 255, 0, 0.2);
        }

        .search-btn {
            padding: 15px 30px;
            border: none;
            border-radius: 50px;
            background: linear-gradient(135deg, #00ff00 0%, #00cc00 100%);
            color: #000000;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 255, 0, 0.3);
        }

        .search-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 255, 0, 0.4);
        }

        .search-divider {
            display: flex;
            align-items: center;
            margin: 15px 0;
            color: #888;
        }

        .search-divider::before,
        .search-divider::after {
            content: '';
            flex: 1;
            height: 1px;
            background: linear-gradient(to right, transparent, #333, transparent);
            margin: 0 15px;
        }

        .ai-search-link {
            color: #00ff00;
            font-weight: 600;
            text-decoration: none;
            padding: 10px 20px;
            border: 2px solid rgba(0, 255, 0, 0.3);
            border-radius: 25px;
            display: inline-block;
            transition: all 0.3s ease;
        }
        
        .ai-search-link:hover {
            background: rgba(0, 255, 0, 0.1);
            border-color: #00ff00;
        }

        .search-options {
            display: flex;
            justify-content: center;
            gap: 30px;
            margin: 15px 0;
            flex-wrap: wrap;
        }

        .search-option {
            display: flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
            padding: 10px 15px;
            border-radius: 25px;
            transition: all 0.3s ease;
        }

        .search-option:hover {
            background: rgba(0, 255, 0, 0.1);
        }

        .search-option input[type="radio"] {
            appearance: none;
            width: 20px;
            height: 20px;
            border: 2px solid #00ff00;
            border-radius: 50%;
            position: relative;
            cursor: pointer;
        }

        .search-option input[type="radio"]:checked::before {
            content: '';
            width: 10px;
            height: 10px;
            background: #00ff00;
            border-radius: 50%;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .search-option label {
            cursor: pointer;
            color: #ffffff;
            font-weight: 500;
        }

        .dropdown-container {
            display: none;
            margin-top: 15px;
            padding: 15px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            border: 1px solid rgba(0, 255, 0, 0.2);
        }
        
        .dropdown-container label {
            display: block;
            margin-bottom: 10px;
            color: #00ff00;
            font-weight: 600;
        }

        #recipeDropdown {
            width: 100%;
            max-width: 300px;
            padding: 15px;
            border: 2px solid rgba(0, 255, 0, 0.3);
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.1);
            color: #ffffff;
            font-size: 16px;
            outline: none;
        }

        /* Filter section */
        .filter-section {
            background: rgba(30, 30, 30, 0.8);
            padding: 25px 20px;
            border-bottom: 1px solid #333;
        }

        .filter-container {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            justify-content: center;
            gap: 15px;
            flex-wrap: wrap;
        }

        .filter-btn {
            padding: 12px 25px;
            background: rgba(255, 255, 255, 0.05);
            color: #ffffff;
            border: 2px solid rgba(0, 255, 0, 0.3);
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
            backdrop-filter: blur(5px);
        }

        .filter-btn:hover, .filter-btn.active {
            background: linear-gradient(135deg, #00ff00 0%, #00cc00 100%);
            color: #000;
            border-color: #00ff00;
            box-shadow: 0 4px 15px rgba(0, 255, 0, 0.3);
            transform: translateY(-2px);
        }

        /* Recipe grid section */
        .recipes-section {
            padding: 40px 20px;
            min-height: 400px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 25px;
            padding: 0 10px;
        }

        .child {
            background: linear-gradient(135deg, #2a2a2a 0%, #1e1e1e 100%);
            border: 1px solid rgba(0, 255, 0, 0.1);
            border-radius: 15px;
            padding: 20px;
            text-align: center;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            transition: all 0.4s ease;
            backdrop-filter: blur(10px);
            overflow: hidden;
            position: relative;
        }

        .child::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, transparent, #00ff00, transparent);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .child:hover {
            transform: translateY(-8px);
            box-shadow: 0 15px 40px rgba(0, 255, 0, 0.2);
            border-color: rgba(0, 255, 0, 0.5);
        }

        .child:hover::before {
            opacity: 1;
        }

        .foodimage {
            width: 100%;
            height: 200px;
            border-radius: 12px;
            object-fit: cover;
            margin-bottom: 20px;
            transition: transform 0.3s ease;
        }

        .child:hover .foodimage {
            transform: scale(1.05);
        }

        .foodname {
            font-size: 20px;
            color: #ffffff;
            margin-bottom: 8px;
            font-weight: 600;
            letter-spacing: 0.5px;
        }

        .food-category {
            color: #00ff00;
            font-size: 14px;
            font-weight: 500;
            margin-bottom: 20px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .show-btn {
            background: linear-gradient(135deg, #00ff00 0%, #00cc00 100%);
            color: #000000;
            border: none;
            padding: 15px 25px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            cursor: pointer;
            border-radius: 25px;
            transition: all 0.3s ease;
            font-weight: 600;
            width: 100%;
            box-shadow: 0 4px 15px rgba(0, 255, 0, 0.3);
        }

        .show-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 255, 0, 0.4);
        }

        .no-results {
            grid-column: 1 / -1;
            text-align: center;
            color: #888;
            font-size: 20px;
            margin-top: 60px;
            padding: 40px;
            background: rgba(255, 255, 255, 0.02);
            border-radius: 15px;
            border: 1px dashed #333;
        }

        .loading {
            display: none;
            text-align: center;
            margin: 40px 0;
            color: #00ff00;
            font-size: 18px;
            font-weight: 500;
        }

        .loading::after {
            content: '';
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid rgba(0, 255, 0, 0.3);
            border-top: 2px solid #00ff00;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-left: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Mobile responsiveness */
        @media (max-width: 768px) {
            .nav-links {
                display: none;
            }

            .menu-icon {
                display: block;
            }

            .nav-links.mobile {
                display: flex;
                flex-direction: column;
                gap: 10px;
                background: #000;
                position: absolute;
                top: 60px;
                right: 20px;
                padding: 20px;
                border-radius: 5px;
            }

            .nav-links.mobile a {
                color: #00ff00;
            }

            .search-title {
                font-size: 24px;
            }

            .search-form {
                padding: 20px;
            }

            .search-input-group {
                flex-direction: column;
                align-items: center;
            }

            .search-box {
                max-width: 100%;
                margin-bottom: 10px;
            }

            .search-options {
                flex-direction: column;
                gap: 15px;
            }

            .container {
                grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
                gap: 20px;
            }

            .filter-container {
                gap: 10px;
            }

            .filter-btn {
                padding: 10px 20px;
                font-size: 14px;
            }
        }

        @media (max-width: 480px) {
            .search-section {
                padding: 30px 15px;
            }

            .container {
                grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
                gap: 15px;
                padding: 0 5px;
            }

            .child {
                padding: 15px;
            }

            .foodimage {
                height: 150px;
            }

            .foodname {
                font-size: 18px;
            }

            .show-btn {
                padding: 12px 20px;
                font-size: 14px;
            }
        }

        @media(min-width: 769px) {
            .menu-icon {
                display: none;
            }
        }
    </style>
</head>
<body>
      <%- include("./header") %>


    <main class="main-content">
        <section class="search-section">
            <div class="search-container">
                <h1 class="search-title">Discover Amazing Recipes</h1>
                <p class="search-subtitle">Find your next culinary adventure from thousands of delicious recipes</p>
                
                <form class="search-form" action="/recipe/item" method="post" onsubmit="return handleSubmit()">
                    <div class="search-input-group">
                        <input type="text" class="search-box" name="dish" id="dishInput" placeholder="Search for a recipe...">
                        <input type="submit" class="search-btn" value="Search">   
                    </div>
                    
                    <div class="search-divider">or</div>
                    
                    <a href="/aiform" class="ai-search-link">Search based on multiple ingredients</a>
                    
                    <div class="search-options">
                        <div class="search-option">
                            <input type="radio" name="searchType" value="searchFromAPI" onclick="hideDropdown()" checked id="apiSearch">
                            <label for="apiSearch">Search from API</label>
                        </div>
                        <div class="search-option">
                            <input type="radio" name="searchType" value="searchFromUser" onclick="toggleDropdown()" id="userSearch">
                            <label for="userSearch">Search from Users</label>
                        </div>
                    </div>

                    <div class="dropdown-container" id="dropdownContainer">
                        <label for="recipeDropdown">Select Recipe Category:</label>
                        <select id="recipeDropdown" name="selectedDish">
                            <option value="">--Select a category--</option>
                        </select>
                    </div>
                </form>
            </div>
        </section>

      

        <div class="loading" id="loadingIndicator">Loading recipes...</div>

        <section class="recipes-section">
            <div class="container" id="recipeContainer">
                <% if (dishData && dishData.length > 0) { %>
                    <% dishData.forEach(data => { %> 
                        <div class="child" data-category="<%= data.strCategory || 'unknown' %>">
                            <img src="<%= data.strMealThumb %>" class="foodimage" alt="<%= data.strMeal %>">
                            <h3 class="foodname"><%= data.strMeal %></h3>
                            <p class="food-category"><%= data.strCategory %></p>
                            <a class="show-btn" href="/recipe/item/<%= data.idMeal %>">Explore Cuisine</a>
                        </div>
                    <% }) %> 
                <% } else { %>
                    <div class="no-results">Search recipes to see results.</div>
                <% } %>
            </div>
        </section>
    </main>

    <script>
        const container = document.querySelector('.container');
        const dropdown_container = document.querySelector('.dropdown-container');
        const menuIcon = document.querySelector('.menu-icon');
        const navLinks = document.querySelector('.nav-links');
        const recipeDropdown = document.getElementById('recipeDropdown');
        const filterContainer = document.getElementById('filterContainer');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const recipeContainer = document.getElementById('recipeContainer');

        menuIcon.addEventListener('click', () => {
            navLinks.classList.toggle('mobile');
        });

        const toggleDropdown = async () => {
            dropdown_container.style.display = 'block';
            loadingIndicator.style.display = 'block';
            
            try {
                const response = await fetch('https://reciperealm-1.onrender.com/getCategory');
                const data = await response.json();
                
                recipeDropdown.innerHTML = `<option value="">--Select a category--</option>`;
                data.forEach(d => {
                    const option = `<option value="${d}">${d}</option>`;
                    recipeDropdown.innerHTML += option;
                });
            } catch (error) {
                console.error('Error fetching categories:', error);
            } finally {
                loadingIndicator.style.display = 'none';
            }
        };

        const hideDropdown = () => {
            dropdown_container.style.display = 'none';
        };

        recipeDropdown.addEventListener('change', async function() {
            const selectedCategory = this.value;
            if (selectedCategory) {
                loadingIndicator.style.display = 'block';
                recipeContainer.innerHTML = '';
                
                try {
                    const response = await fetch('/getDishListAsPerCategory', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({category: selectedCategory})
                    });
                    
                    const data = await response.json();
                    
                    if (data && data.length > 0) {
                        data.forEach(d => {
                            const foodCard = `
                                <div class="child" data-category="${d.category || 'unknown'}">
                                    <img src="/images/uploads/${d.filename}" class="foodimage" alt="${d.dishName}">
                                    <h3 class="foodname">${d.dishName}</h3>
                                    <p class="food-category">${d.category}</p>
                                    <a class="show-btn" href="/seeRecipe/${d._id}">Explore Cuisine</a>
                                </div>`;
                            recipeContainer.innerHTML += foodCard;
                        });
                    } else {
                        recipeContainer.innerHTML = '<div class="no-results">No recipes found in this category.</div>';
                    }
                } catch (error) {
                    console.error('Error fetching recipes:', error);
                    recipeContainer.innerHTML = '<div class="no-results">Error loading recipes. Please try again.</div>';
                } finally {
                    loadingIndicator.style.display = 'none';
                }
            }
        });

        // Filter functionality
        if (filterContainer) {
            const filterButtons = filterContainer.querySelectorAll('.filter-btn');
            
            filterButtons.forEach(button => {
                button.addEventListener('click', () => {
                    // Update active state
                    filterButtons.forEach(btn => btn.classList.remove('active'));
                    button.classList.add('active');
                    
                    const category = button.getAttribute('data-category');
                    filterRecipes(category);
                });
            });
        }

        function filterRecipes(category) {
            const recipes = recipeContainer.querySelectorAll('.child');
            
            recipes.forEach(recipe => {
                const recipeCategory = recipe.getAttribute('data-category').toLowerCase();
                
                if (category === 'all' || recipeCategory.includes(category)) {
                    recipe.style.display = 'block';
                } else {
                    recipe.style.display = 'none';
                }
            });
            
            // Check if any recipes are visible
            const visibleRecipes = recipeContainer.querySelectorAll('.child[style="display: block"]');
            if (visibleRecipes.length === 0) {
                recipeContainer.innerHTML = '<div class="no-results">No recipes match the selected filter.</div>';
            }
        }

        function handleSubmit() {
            const searchType = document.querySelector('input[name="searchType"]:checked').value;
            const dishInput = document.getElementById('dishInput').value;
            
            if (searchType === 'searchFromUser') {
                const selectedDish = recipeDropdown.value;
                if (!selectedDish) {
                    alert('Please select a category from the dropdown');
                    return false;
                }
            } else {
                if (!dishInput.trim()) {
                    alert('Please enter a dish name to search');
                    return false;
                }
            }
            
            loadingIndicator.style.display = 'block';
            return true;
        }
    </script>
</body>
</html>