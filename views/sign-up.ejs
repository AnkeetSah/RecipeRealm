<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>RecipeRealm by WebVerse Studios</title>
     <link rel="icon" type="image/png" href="./images/appLogo/fav.png">
    <link rel="stylesheet" href="/css/header.css">

  <head>
    <meta property="og:title" content="RecipeRealm">
    <meta property="og:site_name" content="RecipeRealm">
    <meta property="og:url" content="https://reciperealm-uibz.onrender.com/">
    <meta property="og:description"
      content="Explore a wide variety of recipes from around the world, add your own creations, like your favorites, and leave comments. Join our community of food lovers!">
    <meta property="og:type" content="website">
    <meta property="og:image" content="https://reciperealm-uibz.onrender.com/images/og/og.png">



  </head>

  <style>
    /* Universal Styles */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body,
    html {
      height: 100%;
      width: 100%;


      background-color: black;
      /* Main background color */
      font-family: 'Arial', sans-serif;
    }

    .splash-screen {
      text-align: center;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      position: absolute;
      width: 100%;
      height: 100%;
      background-color: black;
      z-index: 1000;
      transition: opacity 1s ease;
    }

    .splash-screen.hidden {
      opacity: 0;
      visibility: hidden;
    }

    .logo-container {
      width: 150px;
      height: 150px;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .logo {
      width: 100%;
      max-height: 100%;
    }

    .brand-name p {
      color: #00FF00;
      /* Green Text */
      font-size: 2em;
      font-weight: bold;
    }

    @media screen and (min-width: 768px) {
      .logo-container {
        width: 200px;
        height: 250px;
      }

      .brand-name p {
        font-size: 3em;
      }
    }

    .from {
      color: #a4f2a4;
    }

    @media screen and (max-width: 450px) {
      .logo-container {
        margin-top: -220px;
      }

      .brand-name {
        position: absolute;
        bottom: 30px;
      }
    }

    /* Login/Signup Form Styles */
    .form-container {
      height: auto;
      padding:15px 20px;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
      width: 300px;
      border:#00FF00 3px solid;
      margin-top: 20px;
      display: none;
      background: rgb(4, 4, 4);
    }
    

    body.show-form .form-container {
      display: block;
    }

    body.show-form .splash-screen {
      display: none;
    }

    body {
      background-color: #121212;
      display: flex;
      flex-direction: column;
      align-items: center;
      background-image: url('https://images.pexels.com/photos/1510692/pexels-photo-1510692.jpeg');
      background-repeat: no-repeat;
      background-size: cover;
      background-position: center;
    }

    header {
      display: flex;
      align-items: center;
      justify-content: flex-start;
      width: 100%;
      
      background-color: black;

      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.5);
    }

    .app-name {
      font-size: 20px;
      color: #32CD32;
    }

    header img {
      height: 50px;
    }

    .form-container h1 {
      text-align: center;
      margin-bottom: 20px;
      color: #32CD32;
    }

    .form-container input {
      display: block;
      width: 100%;
      margin-bottom: 10px;
      padding: 10px;
      border-radius: 5px;
      border: 1px solid #32CD32;
      background-color: #fff;
      color: #121212;
      transition: border-color 0.3s, background-color 0.3s;
    }

    .form-container input[type="submit"] {
      background-color: #32CD32;
      color: #fff;
      border: none;
      cursor: pointer;
      transition: background-color 0.3s;
    }
  
    .form-container input[type="submit"]:hover {
      background-color: #28a745;
    }

    .switch-form {
      text-align: center;
      margin-top: 10px;
      color: #ccc;
    }

    .switch-form a {
      color: #32CD32;
      text-decoration: none;
      font-weight: bold;
      cursor: pointer;
      transition: color 0.3s;
    }

    .switch-form a:hover {
      color: #28a745;
    }

    .none {
      display: none !important;
    }

    .container {
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .messageDiv {
      color: red;
      text-align: center;
      font-weight: bold;
      margin-top: 20px;

      border-radius: 5px;
      display: inline-block;
    }

    .messageDiv.success {
      color: green;
      background-color: rgba(0, 255, 0, 0.1);
    }

    .success-message {
      text-align: center;
    }
  </style>
</head>

<body>

  <!-- Splash Screen -->
  <div class="splash-screen">
    <div class="logo-container">
    
     <img src="/images/appLogo/Screenshot__265_-removebg-preview (1) (1).png" alt="WebVerse Studios Logo" class="logo">
    
    </div>
    <div class="brand-name">
      <div class="from">
        <h3>from</h3>
      </div>
      <p>WebVerse Studios</p>
    </div>
  </div>

  <!-- Login/Signup Page -->
  <header>
    <div class="app-icon">
      <span class="app-name">
        <img src="/images/appLogo/headerLogo.png" alt="">
      </span>
    </div>
  </header>

  <div class="container">
    <div class="form-container" id="formContainer">
      <form id="loginForm">
        <h1 id="loginTitle" class="formTitle">Login</h1>
        <input type="email" id="email" name="email" placeholder="Email" required>
        <input type="password" id="password" name="password" placeholder="Password" required>
        <input type="submit" value="Login">
        <div class="switch-form">
          <p id="switchText">Don't have an account? <a href="#" id="switchtoSignLink">Sign Up</a></p>
        </div>
      </form>
     


      <form id="signupForm" action="/account/register" method="post" class="none">
        <h1 id="signupTitle" class="formTitle">Sign Up</h1>
        <input type="text" name="name" placeholder="Name" required>
        <input type="email" name="email" placeholder="Email" required>
        <input type="password" name="password" placeholder="Password" required>

        <input type="submit" value="Sign Up">
        <div class="switch-form">
          <p id="switchText">Have an account? <a href="#" id="switchLogLink">Log in</a></p>
        </div>
        <div id="error-message" style="color: red; font-weight: bold; display: none;"></div>
        <div id="success-message" style="color: green; font-weight: bold; display: none;"></div>
      </form>
    </div>

  </div>
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      // Hide splash screen after 3 seconds
      setTimeout(() => {
        document.body.classList.add('show-form');
      }, 2000);

      // Toggle between login and signup forms
      const switchtoSignLink = document.getElementById('switchtoSignLink');
      const switchLogLink = document.getElementById('switchLogLink');
      const loginForm = document.getElementById('loginForm');
      const signupForm = document.getElementById('signupForm');
      const messageDiv = document.querySelector('.messageDiv');

      // Hide login and show sign-up
      switchtoSignLink.addEventListener('click', function (e) {
        e.preventDefault();
        loginForm.classList.add('none');
        signupForm.classList.remove('none');
      });

      // Hide sign-up and show login
      switchLogLink.addEventListener('click', function (e) {
        e.preventDefault();
        signupForm.classList.add('none');
        loginForm.classList.remove('none');
      });

      // Handle login form submission using Fetch API
      loginForm.addEventListener('submit', async function (e) {
        e.preventDefault(); // Prevent default form submission

        const email = document.getElementById('email').value;
        const password = document.getElementById('password').value;
        const loginButton = loginForm.querySelector('input[type="submit"]');

        // Disable the button during login processing
        loginButton.disabled = true;

        try {
          const response = await fetch('/account/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ email, password }),
          });

          const data = await response.json();

          if (response.ok) {
            // Save authentication token if provided
            if (data.token) {
              localStorage.setItem('authToken', data.token);
            }
            // Redirect to dashboard
            window.location.href = '/home';
          } else {
            showMessage(data.message || 'Invalid Credential. Please try again.', 'error');
          }
        } catch (error) {
          console.error('Error:', error);
          showMessage('An error occurred. Please try again later.', 'error');
        } finally {
          loginButton.disabled = false;
        }
      });

      // Function to display messages dynamically
      function showMessage(message, type) {
        // Clear any previous message
        messageDiv.textContent = '';

        // Set the error message
        messageDiv.textContent = message;

        // You could also add additional styling based on the error type, if needed.
        messageDiv.style.color = type === 'error' ? 'red' : 'green';

        // Display the message and set a timeout to remove it
        setTimeout(() => {
          messageDiv.textContent = '';  // Clears the message after 5 seconds
        }, 5000);
      }
    });

    signupForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(signupForm);
      const formObject = {};
      formData.forEach((value, key) => {
        formObject[key] = value;
      });


      try {
        // Send data to server using fetch and async/await
        const response = await fetch('/account/register', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formObject)  // Send the form data as JSON
        });

        const result = await response.json();  // Parse JSON response

        // Handle success and error messages with template literals
        if (result.success) {
          window.location.href = '/home';
        } else if (result.error) {
          document.getElementById('error-message').textContent = `${result.error}`;
          document.getElementById('error-message').style.display = 'block';
          document.getElementById('success-message').style.display = 'none';
        }
      } catch (error) {
        console.error('Error:', error);
        document.getElementById('error-message').textContent = 'An error occurred. Please try again.';
        document.getElementById('error-message').style.display = 'block';
        document.getElementById('success-message').style.display = 'none';
      }



    })







  </script>


</body>

</html>